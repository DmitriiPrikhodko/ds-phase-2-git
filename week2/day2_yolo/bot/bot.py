import logging
import os
import io
import asyncio
import torch
from PIL import Image

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
os.makedirs("./log", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    filename="./log/bot_log.log",
    format="%(asctime)s - %(levelname)s - %(funcName)s: %(lineno)d - %(message)s",
)
console = logging.StreamHandler()
console.setLevel(logging.INFO)
logging.getLogger("").addHandler(console)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = "YOUR_BOT_TOKEN_HERE"
YOLO_WEIGHTS = "./weights/yolov8n_weights.pth"  # –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–µ—Å–æ–≤

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
model = None

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO ---
def load_model(weights_path: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç YOLO –º–æ–¥–µ–ª—å"""
    logging.info("–ó–∞–≥—Ä—É–∂–∞—é YOLO –º–æ–¥–µ–ª—å...")
    try:
        from ultralytics import YOLO
        m = YOLO(weights_path)  # –∑–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –≤–µ—Å–æ–≤ –Ω–µ—Ç, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 'yolov8n.pt'
        logging.info("YOLO –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return m
    except ImportError:
        logging.error("Ultralytics YOLO –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ pip install ultralytics")
        raise


async def download_photo(bot: Bot, file_id: str) -> Image.Image:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PIL Image"""
    file = await bot.get_file(file_id)
    photo_bytes = await bot.download_file(file.file_path)
    return Image.open(photo_bytes).convert("RGB")


async def process_single_photo(bot: Bot, photo: types.PhotoSize, index: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
    try:
        image = await download_photo(bot, photo.file_id)
        # --- YOLO –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ---
        results = model.predict(image, imgsz=640, conf=0.25)  # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        # --- –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É ---
        annotated_frame = results[0].plot()  # numpy array
        annotated_image = Image.fromarray(annotated_frame)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        bio = io.BytesIO()
        annotated_image.save(bio, format="PNG")
        bio.seek(0)

        return {
            "index": index,
            "image_bytes": bio,
            "success": True,
        }
    except Exception as e:
        return {"index": index, "error": str(e), "success": False}


async def handle_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ‚Äî –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç message.photo)"""
    user_name = message.from_user.full_name
    logging.info(f"{user_name} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ ({len(message.photo)} —Ä–∞–∑–º–µ—Ä–æ–≤)")

    processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")

    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
    photo = message.photo[-1]
    result = await process_single_photo(message.bot, photo, 0)

    await processing_msg.delete()

    if result["success"]:
        await message.answer_photo(result["image_bytes"], caption="üì∏ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")


async def cmd_start(message: Message):
    user_name = message.from_user.full_name
    logging.info(f"{user_name} ({message.from_user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —è –ø–æ–∫–∞–∂—É, —á—Ç–æ –Ω–∞ –Ω–µ–π –æ–±–Ω–∞—Ä—É–∂–∏–ª YOLO.\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É!"
    )


async def text_answer(message: Message):
    user_name = message.from_user.full_name
    logging.info(f"{user_name} ({message.from_user.id}) –Ω–∞–ø–∏—Å–∞–ª: {message.text}")
    await message.answer("–Ø –Ω–µ —É–º–µ—é —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å, —É–º–µ—é —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö üñºÔ∏è")


async def main():
    global model
    model = load_model(YOLO_WEIGHTS)

    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(text_answer, F.text)
    dp.message.register(handle_photo, F.photo)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
